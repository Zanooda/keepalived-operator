# expected merge structure
# .KeepAlivedGroup
# .Services
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: {{ .KeepalivedGroup.ObjectMeta.Name }}
    namespace: {{ .KeepalivedGroup.ObjectMeta.Namespace }}
  spec:
    selector:
      matchLabels:
        keepalivedGroup: {{ .KeepalivedGroup.ObjectMeta.Name }}
    template:
      metadata:
        labels:
          keepalivedGroup: {{ .KeepalivedGroup.ObjectMeta.Name }}
      spec:
        tolerations:
          - operator: Exists
        nodeSelector:
        {{ range $index, $element := .KeepalivedGroup.Spec.NodeSelector }}  
          {{ $index }}: {{ $element }}
        {{ end }}  
        hostNetwork: true
        automountServiceAccountToken: false
        enableServiceLinks: false
        shareProcessNamespace: true
        containers:
        - name: keepalived
          image: {{ .KeepalivedGroup.Spec.Image }}
          command:
          - /bin/bash
          args:
          - -c
          - >
            exec /usr/sbin/keepalived
            --log-console
            --log-detail
            --dont-fork
            --config-id=${POD_NAME}
            --use-file=/etc/keepalived.d/keepalived.conf
            --pid=/etc/keepalived.pid/keepalived.pid
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          volumeMounts:
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /etc/keepalived.d
            name: config
            readOnly: true
          - mountPath: /etc/keepalived.pid
            name: pid
          - mountPath: /tmp
            name: stats                               
          securityContext:
            privileged: true
        - name: config-reloader
          image: {{ .Misc.image }}
          imagePullPolicy: Always
          command:
          - bash
          - -c
          - /usr/local/bin/notify.sh
          env:
          - name: pid
            value: /etc/keepalived.pid/keepalived.pid
          - name: file
            value: /etc/keepalived.d/keepalived.conf   
          volumeMounts:
          - mountPath: /etc/keepalived.d
            name: config
            readOnly: true
          - mountPath: /etc/keepalived.pid
            name: pid
          securityContext:
            runAsUser: 0  
        - name: prometheus-exporter
          image: {{ .Misc.image }}
          imagePullPolicy: Always
          command:
          - /usr/local/bin/keepalived_exporter
          args:
          - '-web.listen-address'
          - ':9650'
          - '-web.telemetry-path'
          - '/metrics'
          securityContext:
            privileged: true
          ports:
          - name: metrics
            containerPort: 9650
            protocol: TCP  
          volumeMounts:
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /tmp
            name: stats                                                                                             
        volumes:
        - hostPath:
            path: /lib/modules
          name: lib-modules
        - name: config
          configMap:
            name: {{ .KeepalivedGroup.ObjectMeta.Name }}
        - name: pid
          emptyDir:
            medium: Memory
        - name: stats
          emptyDir: {}                                
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: {{ .KeepalivedGroup.ObjectMeta.Name }}
    namespace: {{ .KeepalivedGroup.ObjectMeta.Namespace }}
    labels:
      keepalivedGroup: {{ .KeepalivedGroup.ObjectMeta.Name }}    
  data: 
    keepalived.conf: |
      global_defs {
          router_id {{ .KeepalivedGroup.ObjectMeta.Name }}
{{ range $key,$value := .KeepalivedGroup.Spec.VerbatimConfig }}
          {{ $key }} {{ $value }}
{{ end }}                    
      }

    {{- range $service := .Services }}
    {{- if eq $service.Spec.ExternalTrafficPolicy "Local" }}
    {{- $namespacedName := printf "%s/%s" $service.ObjectMeta.Namespace $service.ObjectMeta.Name }}
      vrrp_script {{ $namespacedName }} {
        script "/usr/bin/curl --fail --max-time 1 http://127.0.0.1:{{ $service.Spec.HealthCheckNodePort }}/health"
        timeout 10
        rise 3
        fall 3
      }
    {{- end }}
    {{- end }}

  {{ $root:=. }} 
  {{ $verbatim_key:="keepalived-operator.redhat-cop.io/verbatimconfig"}}  
  {{ $auth_key:="keepalived-operator.redhat-cop.io/authconfig"}}
  {{ $spread_key:="keepalived-operator.redhat-cop.io/spreadvips" }} 
  {{ range $service := .Services }}
      {{ $namespacedName:=printf "%s/%s" $service.ObjectMeta.Namespace $service.ObjectMeta.Name }}
      {{- if eq (index $service.GetAnnotations $spread_key) "true"}}
      {{- range $i, $ip := (mergeStringSlices $service.Status.LoadBalancer.Ingress $service.Spec.ExternalIPs) }}
      {{- $namespacedNameForIP := printf "%s/%s" $namespacedName $ip }}
      {{- $owner := index $root.KeepalivedPods (modulus $i (len $root.KeepalivedPods)) }}
      vrrp_instance {{ $namespacedNameForIP }} {
          @{{ $owner.ObjectMeta.Name }} state MASTER
          @^{{ $owner.ObjectMeta.Name }} state BACKUP
          @{{ $owner.ObjectMeta.Name }} priority 200
          @^{{ $owner.ObjectMeta.Name }} priority 100
          interface {{ $root.KeepalivedGroup.Spec.Interface }}
          
          virtual_router_id {{ index $root.KeepalivedGroup.Status.RouterIDs $namespacedNameForIP }}  
          
          virtual_ipaddress {
            {{ $ip }}
          }

          {{- if eq $service.Spec.ExternalTrafficPolicy "Local" }}
          track_script {
            {{ $namespacedName }}
          }
          {{- end }}

          {{ range $key , $value := (parseJson (index $service.GetAnnotations $verbatim_key)) }}
          {{ $key }} {{ $value }}
          {{ end }}

          authentication {
            {{ range $key , $value := (parseJson (index $service.GetAnnotations $auth_key)) }}
            {{ $key }} {{ $value }}
            {{ end }}
          }

      }
      {{- end }}
      {{- else }}
      vrrp_instance {{ $namespacedName }} {
          interface {{ $root.KeepalivedGroup.Spec.Interface }}
          
          virtual_router_id {{ index $root.KeepalivedGroup.Status.RouterIDs $namespacedName }}  
          
          virtual_ipaddress {
            {{ range mergeStringSlices $service.Status.LoadBalancer.Ingress $service.Spec.ExternalIPs }}
            {{ . }}
            {{ end }}
          }

          {{- if eq $service.Spec.ExternalTrafficPolicy "Local" }}
          track_script {
            {{ $namespacedName }}
          }
          {{- end }}

          {{ range $key , $value := (parseJson (index $service.GetAnnotations $verbatim_key)) }}
          {{ $key }} {{ $value }}
          {{ end }}

          authentication {
            {{ range $key , $value := (parseJson (index $service.GetAnnotations $auth_key)) }}
            {{ $key }} {{ $value }}
            {{ end }}
          }
      }
      {{- end }}
  {{ end }}
{{ if eq .Misc.supportsPodMonitor "true" }}
- apiVersion: monitoring.coreos.com/v1
  kind: PodMonitor
  metadata:
    name: {{ .KeepalivedGroup.ObjectMeta.Name }}
    namespace: {{ .KeepalivedGroup.ObjectMeta.Namespace }}
    labels:
      keepalivedGroup: {{ .KeepalivedGroup.ObjectMeta.Name }}
      metrics: keepalived
  spec:
    selector:
      matchLabels:
        keepalivedGroup: {{ .KeepalivedGroup.ObjectMeta.Name }}
    podMetricsEndpoints:
    - port: metrics
{{ end}}
